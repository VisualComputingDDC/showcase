<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Visual Computing 2023-1 - G1 - DDC</title><link>https://VisualComputingDDC.github.io/showcase/</link><description>Recent content in Introduction on Visual Computing 2023-1 - G1 - DDC</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://VisualComputingDDC.github.io/showcase/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a New Theme</title><link>https://VisualComputingDDC.github.io/showcase/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>https://VisualComputingDDC.github.io/showcase/posts/creating-a-new-theme/</guid><description>Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description></item><item><title>Migrate to Hugo from Jekyll</title><link>https://VisualComputingDDC.github.io/showcase/posts/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://VisualComputingDDC.github.io/showcase/posts/migrate-from-jekyll/</guid><description>Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description></item><item><title>(Hu)go Template Primer</title><link>https://VisualComputingDDC.github.io/showcase/posts/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://VisualComputingDDC.github.io/showcase/posts/goisforlovers/</guid><description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description></item><item><title>Getting Started with Hugo</title><link>https://VisualComputingDDC.github.io/showcase/posts/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://VisualComputingDDC.github.io/showcase/posts/hugoisforlovers/</guid><description>Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:</description></item><item><title/><link>https://VisualComputingDDC.github.io/showcase/docs/shortcodes/group-members/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://VisualComputingDDC.github.io/showcase/docs/shortcodes/group-members/</guid><description>Group Members # Juliana Catalina De Castro Moreno Juliana Catalina De Castro Moreno # I am systems engineering student at Universidad Nacional de Colombia. My interest are software architecture, cloud and project management. Moreover, I strongly agree with the fact that the life is for enjoy and for that reason I love to workout, hang out with friends, reading and being happy through a life balance. Over all, learning a lot of things each day.</description></item><item><title/><link>https://VisualComputingDDC.github.io/showcase/docs/shortcodes/shaders/Image-Processing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://VisualComputingDDC.github.io/showcase/docs/shortcodes/shaders/Image-Processing/</guid><description>Image Processing # 1. Introduction &amp;amp; Background # Digital image processing is the use of a digital computer to process digital images through an algorithm (Atalla &amp;amp; Kahng, n.d.). In webgl (i.e., GLSL ES) texturing is used to implement image processing (Charalambos, 2023).
For this exercise, different effects were applied to an image and a video. Using image processing through texturing, and implementing convolutions to apply different masks or kernels.</description></item><item><title/><link>https://VisualComputingDDC.github.io/showcase/docs/shortcodes/shaders/Procedural-Texturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://VisualComputingDDC.github.io/showcase/docs/shortcodes/shaders/Procedural-Texturing/</guid><description>Procedural Texturing # 1. Introduction &amp;amp; Background # The goal in procedural texturing is to procedurally generate a texture using an algorithm in such a way that the result can be mapped onto a shape as a texture. Procedural texturing requires the use of a frame buffer object which in p5.js is implemented as a p5.Graphics object (Procedural Texturing, 2023).
A framebuffer (frame buffer, or sometimes framestore) is a portion of random-access memory (RAM) containing a bitmap that drives a video display.</description></item><item><title/><link>https://VisualComputingDDC.github.io/showcase/docs/shortcodes/shaders/Texturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://VisualComputingDDC.github.io/showcase/docs/shortcodes/shaders/Texturing/</guid><description>Texture Sampling # 1. Introduction &amp;amp; Background # A texture map is an image applied (mapped) to the surface of a shape or polygon. This may be a bitmap image or a procedural texture. They may be stored in common image file formats, referenced by 3d model formats or material definitions, and assembled into resource bundles (Texture Mapping, n.d.).
Texture sampling is the process of reading textures through the GPU.</description></item><item><title/><link>https://VisualComputingDDC.github.io/showcase/docs/shortcodes/visual-illusions/Academic-Report-3D-terrain-generation-with-perlin-noise/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://VisualComputingDDC.github.io/showcase/docs/shortcodes/visual-illusions/Academic-Report-3D-terrain-generation-with-perlin-noise/</guid><description>3D Terrain Generation With Perlin Noise # 1. Introduction # In this academic report we are going to develop a 3D Terrain Generator that helps people who are cartographers digitizing representative maps of the world, artists or designers investing their own works, or videogame developers in creating, producing, and generating the necessary maps for the proper development of the video game.
To solve this problem, cartographers, artists, designers and developers use Perlin Noise due its ability to produce more natural-looking patterns of noise and its ability to create complex and varied patterns of noise that looked more natural and organic than previous algorithms.</description></item><item><title/><link>https://VisualComputingDDC.github.io/showcase/docs/shortcodes/visual-illusions/Academic-Report-Color-Average/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://VisualComputingDDC.github.io/showcase/docs/shortcodes/visual-illusions/Academic-Report-Color-Average/</guid><description>Color Average # 1. Introduction # This application provides a unique way of visualizing and modifying videos by reducing the resolution of the frames to create a pixelated effect.
In addition to pixelation, the application also includes a color averaging feature that takes the average color of each pixel block and applies it to the entire block. This creates a uniform color effect across each block, giving the video a distinctive look.</description></item><item><title/><link>https://VisualComputingDDC.github.io/showcase/docs/shortcodes/visual-illusions/Academic-Report-Color-Blind/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://VisualComputingDDC.github.io/showcase/docs/shortcodes/visual-illusions/Academic-Report-Color-Blind/</guid><description>Color Blindness # 1. Introduction # In this academic report we are going to develop a color mapping application that helps people who are color blind see the colors around them. To introduce this topic color blindness is a disease that affects a significant percentage of the world&amp;rsquo;s population, about 8% of the male population and 0.5% of women1. It is a genetic disorder that affects the ability to differentiate between certain colors, making it difficult for sufferers to fully experience and appreciate the colors around them.</description></item><item><title/><link>https://VisualComputingDDC.github.io/showcase/docs/shortcodes/visual-illusions/Academic-Report-Moir%C3%A9-Patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://VisualComputingDDC.github.io/showcase/docs/shortcodes/visual-illusions/Academic-Report-Moir%C3%A9-Patterns/</guid><description>Moiré Patterns # 1. Introduction # In mathematics, physics, and art, moiré patterns or moiré fringes are large-scale interference patterns that can be produced when a partially opaque ruled pattern with transparent gaps is overlaid on another similar pattern. For the moiré interference pattern to appear, the two patterns must not be completely identical, but rather displaced, rotated, or have slightly different pitch1.
We decided to study these patterns because of their strong relationship with Masking, a phenomenon of visual perception occurring when the visibility of one image (target) is reduced by the presence of another image (mask)2.</description></item><item><title/><link>https://VisualComputingDDC.github.io/showcase/docs/shortcodes/visual-illusions/Academic-Report-Spatial-Coherence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://VisualComputingDDC.github.io/showcase/docs/shortcodes/visual-illusions/Academic-Report-Spatial-Coherence/</guid><description>Spatial Coherence # 1. Introduction # Spatial coherence is a technique used to preserve the structural integrity of images by retaining the spatial relationships between pixels. The Pixelator video application takes advantage of this technique to create pixelated videos with smooth transitions between frames.
At its core, the pixelator video application uses the power of spatial coherence to analyze and manipulate the pixels in a video stream. This means that as you use the application each pixel is carefully analyzed and manipulated in relation to its surrounding pixels, resulting in a cohesive and visually stunning end result.</description></item><item><title/><link>https://VisualComputingDDC.github.io/showcase/docs/shortcodes/visual-illusions/Presentation-Video/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://VisualComputingDDC.github.io/showcase/docs/shortcodes/visual-illusions/Presentation-Video/</guid><description>Visual Illusions Video</description></item></channel></rss>